name: Build
permissions:
  "contents": "write"

on:

  workflow_dispatch:
    inputs:
      tag:
        description: Build tag
        required: true
        default: dry-run
        type: string
      override_version:
        description: Override the version of the distribution
        required: false
        default: ""
        type: string

jobs:

  # ==========================================================================

  check_version:
    runs-on: "ubuntu-latest"
    outputs:
      build_type: ${{ steps.set-output.outputs.build_type }}
      build_version: ${{ steps.set-output.outputs.build_version }}
      build_version_override: ${{ steps.set-output.outputs.build_version_override }}
      build_tag: ${{ steps.set-output.outputs.build_tag }}
      build_ref: ${{ steps.set-output.outputs.build_ref }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

      # Valid build tags need to match the format 'vX.Y.Z'

      - name: Setup Environment
        id: setup-environment
        shell: bash
        run: |
          build_stamp=$( date +%Y%m%d%H%M%S )
          echo "build_stamp=$build_stamp" >> "$GITHUB_ENV"
          echo "build_tag=${{inputs.tag}}" >> "$GITHUB_ENV"
          echo "build_version_override=${{inputs.override_version}}" >> "$GITHUB_ENV"

      - name: Check for valid tag format
        id: check-valid-tag
        shell: bash
        run: |
          if [[ ! -z "$build_version_override" ]]; then

            if [[ "$build_version_override" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+(\.[0-9.]*)?$ ]] ; then 

              build_version_override=$( echo "$build_version_override" | sed -n "s/^v*\([0-9]*\.[0-9]*\.[0-9]*\(\.[0-9.]*\)*\)/\1/p" )
              echo "Found valid 'override_version' with value '$build_version_override'."

            else

              echo "Invalid override_version format: '$build_version_override'. Setting build type 'error'."
              echo "build_type=error" >> "$GITHUB_ENV"
              exit 1

            fi

          fi

          if [[ "$build_tag" == 'dry-run' ]]; then

            echo "Found 'dry-run' tag. Setting build type 'dry-run'."
            echo "build_type=dry-run" >> "$GITHUB_ENV"
            exit 0

          fi

          if [[ ! "$build_tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] ; then 

            echo "Invalid tag format: '$build_tag'. Setting build type 'error'."
            echo "build_type=error" >> "$GITHUB_ENV"
            exit 1

          fi

          echo "Found valid tag format '$build_tag'. Setting build type 'tag'."
          echo "build_type=tag" >> "$GITHUB_ENV"

      # Do the checkout of the HEAD or the TAG. When the TAG is set, this also verifies that the tag exists.

      - name: Checkout DRYRUN
        id: checkout-dryrun
        if: ${{ always() && env.build_type == 'dry-run' }}
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          fetch-tags: 'true'

      - name: Checkout TAG
        id: checkout-tag
        if: ${{ always() && env.build_type == 'tag' }}
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
          fetch-tags: 'true'
          ref: refs/tags/${{ env.build_tag }}

      # When we're building a dry-run, create a temporary name, based on the latest tag in the build branch

      - name: Determine build version for DRYRUN
        id: determine-build-version-for-dryrun
        if: ${{ always() && env.build_type == 'dry-run' }}
        shell: bash
        run: |
          build_ref="$( git rev-parse HEAD )"
          set +e
          build_tag=$( git tag --merged | grep -v "^v[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -1 )
          set -e

          if [[ -z "$build_tag" ]] ; then 

            set +e
            build_tag=$( git tag --list 'v*' | grep -v "^v[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -1 )
            set -e

            if [[ -z "$build_tag" ]] ; then 

              echo "Current checkout has no tags! Using 'v0.0.1' as intial version for dry-run."
              build_tag="v0.0.1"

            else

              echo "Current checkout has no tags! Using latest tag '$build_tag' as version."

            fi

          fi

          build_version=$( echo "$build_tag" | sed -n "s/^v*\([0-9]*\.[0-9]*\.[0-9]*\)/\1/p" )
          echo "build_tag=$build_tag" >> "$GITHUB_ENV"
          echo "build_version=$build_version" >> "$GITHUB_ENV"
          echo "build_ref=$build_ref" >> "$GITHUB_ENV"

      # When we're building a tag, use the given tag or the override vor the build version

      - name: Determine build version for TAG
        id: determine-build-version-for-tag
        if: ${{ always() && env.build_type == 'tag' }}
        shell: bash
        run: |
          build_ref="$( git rev-parse "$build_tag" )"
          echo "build_ref=$build_ref" >> "$GITHUB_ENV"
          build_version=$( echo "$build_tag" | sed -n "s/^v*\([0-9]*\.[0-9]*\.[0-9]*\)/\1/p" )
          echo "Setting build version to '$build_version' and build_ref to '$build_ref'."
          echo "build_version=$build_version" >> "$GITHUB_ENV"

      # Set the output for the build job

      - name: Set output
        id: set-output
        shell: bash
        run: |
          echo "build_type=$build_type" >> "$GITHUB_OUTPUT"
          echo "build_version=$build_version" >> "$GITHUB_OUTPUT"
          echo "build_version_override=$build_version_override" >> "$GITHUB_OUTPUT"
          echo "build_tag=$build_tag" >> "$GITHUB_OUTPUT"
          echo "build_ref=$build_ref" >> "$GITHUB_OUTPUT"

          echo "Set build_type='$build_type'."
          echo "Set build_version='$build_version'."
          echo "Set build_version_override='$build_version_override'."
          echo "Set build_tag='$build_tag'."
          echo "Set build_ref='$build_ref'."

  # ==========================================================================

  build:
    runs-on: "ubuntu-latest"
    needs: check_version
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      distribution: ${{ steps.set-output.outputs.distribution }}
      build_type: ${{ steps.set-output.outputs.build_type }}
      build_version: ${{ steps.set-output.outputs.build_version }}
      build_version_override: ${{ steps.set-output.outputs.build_version_override }}
      build_tag: ${{ steps.set-output.outputs.build_tag }}
      build_ref: ${{ steps.set-output.outputs.build_ref }}
    steps:

      # Transfer the outputs of the previous job to the environment

      - name: Setup Environment
        id: setup-environment
        shell: bash
        run: |
          echo "build_version=${{ needs.check_version.outputs.build_version }}" >> "$GITHUB_ENV"
          echo "build_version_override=${{ needs.check_version.outputs.build_version_override }}" >> "$GITHUB_ENV"
          echo "build_type=${{ needs.check_version.outputs.build_type }}" >> "$GITHUB_ENV"
          echo "build_ref=${{ needs.check_version.outputs.build_ref }}" >> "$GITHUB_ENV"
          echo "build_tag=${{ needs.check_version.outputs.build_tag }}" >> "$GITHUB_ENV"

      # Checkout with the reference of the previous job

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
          fetch-tags: true
          ref: ${{ env.build_ref }}

      # Setup build environment

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install build dependencies
        id: install-depenencies
        shell: bash
        run: python3 -m pip install --upgrade pip setuptools wheel build virtualenv jinja2

      # Replace placeholders in the templates with the environment variables

      - name: Process templates
        id: process-templates
        shell: python
        run: |
          import sys
          import os
          import jinja2

          env = jinja2.Environment(loader = jinja2.FileSystemLoader('templates'))
          variables = { 
            'build_version': None,
            'build_version_override': None,
            'build_type': None,
            'build_ref': None,
            'build_tag': None,
          }

          for key in variables.keys():

            if key not in os.environ:

              print(f"Error: Environment variable '{key}' not found!")
              sys.exit(10)

            variables[key] = os.environ[key]

          for filename in env.list_templates():

            template = env.get_template(filename)
            output = template.render(variables)

            with open(filename, 'w') as f:

              f.write(output)

      # Do the actual build

      - name: Build
        id: build
        shell: bash
        run: |
          python -m build --sdist .

      # Check the name of the artifact we build

      - name: Determine distribution
        id: determine-distribution
        shell: bash
        run: |
          find dist -type f -ls
          read distribution < <( cd dist && ls -1 *"-$build_version.tar.gz" | head -1 )
          echo "distribution=$distribution" >> "$GITHUB_ENV"

      # Write some meta information to the artifact and set the output of the job

      - name: Create distribution meta-information
        id: create-distribution-meta-information
        shell: bash
        run: |
          mkdir dist/META
          echo -n "$distribution"  > dist/META/DISTRIBUTION
          echo -n "$build_type"    > dist/META/TYPE
          echo -n "$build_version" > dist/META/VERSION
          echo -n "$build_tag"     > dist/META/TAG
          echo -n "$build_ref"     > dist/META/REF

          if [[ ! -z "$build_version_override" ]]; then

            echo -n "$build_version_override" > dist/META/VERSION_OVERRIDE

          fi
          
      # Set the output of the job

      - name: Set output
        id: set-output
        shell: bash
        run: |
          echo -n "distribution=$distribution"   >> "$GITHUB_OUTPUT"
          echo -n "build_type=$build_type"       >> "$GITHUB_OUTPUT"
          echo -n "build_version=$build_version" >> "$GITHUB_OUTPUT"
          echo -n "build_version_override=$build_version_override" >> "$GITHUB_OUTPUT"
          echo -n "build_tag=$build_tag"         >> "$GITHUB_OUTPUT"
          echo -n "build_ref=$build_ref"         >> "$GITHUB_OUTPUT"

          echo "Set distribution='$distribution'."
          echo "Set build_type='$build_type'."
          echo "Set build_version='$build_version'."
          echo "Set build_version_override='$build_version_override'."
          echo "Set build_tag='$build_tag'."
          echo "Set build_ref='$build_ref'."

      # Upload the artifact

      - name: "Upload artifacts"
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: distribution
          if-no-files-found: error
          retention-days: 2
          path: |
            dist/${{ steps.determine-distribution.outputs.distribution }}
            dist/META
