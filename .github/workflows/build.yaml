name: Build
permissions:
  "contents": "write"

on:

  workflow_dispatch:

    inputs:

      build_tag:
        description: Build tag
        required: true
        default: dry-run
        type: string

      build_version_override:
        description: Override the version of the distribution
        required: false
        default: ""
        type: string

jobs:

  main:

    runs-on: "ubuntu-latest"

    outputs:

      distribution: ${{ steps.set-output.outputs.distribution }}
      build_type: ${{ steps.set-output.outputs.build_type }}
      build_version: ${{ steps.set-output.outputs.build_version }}
      build_version_override: ${{ steps.set-output.outputs.build_version_override }}
      build_tag: ${{ steps.set-output.outputs.build_tag }}
      build_ref: ${{ steps.set-output.outputs.build_ref }}

    env:

      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:

      - name: Setup Environment
        id: setup-environment
        shell: bash
        run: |
          echo "build_tag=${{inputs.build_tag}}" >> "$GITHUB_ENV"
          echo "build_version_override=${{inputs.build_version_override}}" >> "$GITHUB_ENV"

      # - name: Checkout TAG
      #   id: checkout-tag
      #   if: env.build_tag != 'dry-run'
      #   continue-on-error: true
      #   uses: actions/checkout@v4
      #   with:
      #     submodules: recursive
      #     fetch-depth: 1
      #     fetch-tags: 'true'
      #     ref: refs/tags/${{ env.build_tag }}

      # - name: Abort when tag not found
      #   id: abort-tag-not-found
      #   if: steps.checkout-tag.outcome != 'success' && env.build_tag != 'dry-run'
      #   shell: bash
      #   run: |
      #     echo "Tag '${{ env.build_tag }}' not found. Aborting build."
      #     exit 1

      # - name: Checkout HEAD
      #   id: checkout-head
      #   if: steps.checkout-tag.outcome != 'success'
      #   uses: actions/checkout@v4
      #   with:
      #     submodules: recursive
      #     fetch-depth: 0
      #     fetch-tags: 'true'

      # - name: Set build_type tag
      #   if: steps.checkout-tag.outcome == 'success'
      #   id: set-build-type-tag
      #   shell: bash
      #   run: |
      #     build_type='tag'
      #     echo "Tag '$build_tag' found. Setting build_type '$build_type'."
      #     echo "build_type=$build_type" >> "$GITHUB_ENV"

      # - name: Set build_type dry-run
      #   if: steps.checkout-tag.outcome != 'success'
      #   id: set-build-type-dry-run
      #   shell: bash
      #   run: |
      #     build_type='dry-run'
      #     echo "Tag '$build_tag' not found. Setting build_type '$build_type'."
      #     echo "build_type=$build_type" >> "$GITHUB_ENV"
      #     echo "build_tag=" >> "$GITHUB_ENV"

      # - name: Set build_tag from git
      #   id: Set-build-version
      #   if: env.build_type == 'dry-run' 
      #   shell: bash
      #   run: |

      #     set +e
      #     build_tag=$( git tag --merged | grep -v "^v[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -1 )
      #     set -e

      #     if [[ -z "$build_tag" ]] ; then 

      #       echo "No build_tag found in current branch, checking full repo."
      #       set +e
      #       build_tag=$( git tag --list 'v*' | grep -v "^v[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -1 )
      #       set -e

      #     fi

      #     if [[ -z "$build_tag" ]] ; then 

      #         build_tag="v0.0.1"
      #         echo "No build_tag found in repo, using '$build_tag'."

      #     fi

      #     echo "Setting build_tag to '$build_tag'."
      #     echo "build_tag=$build_tag" >> "$GITHUB_ENV"

      - name: Checkout
        id: checkout
        uses: ./.github/actions/checkout-tag
        with:
          build_directory: .
          build_tag: ${{ env.build_tag }}

      - name: Setup Environment from checkout
        id: setup-environment-from-checkout
        shell: bash
        run: |
          echo "build_type=${{ steps.checkout.outputs.build_type }}" >> "$GITHUB_ENV"
          echo "build_tag=${{ steps.checkout.outputs.build_tag }}" >> "$GITHUB_ENV"

      # - name: Set build_version from build_tag
      #   id: set-build-version-from-tag
      #   shell: bash
      #   run: |
      #     build_version=$( echo "$build_tag" | sed -n "s/^v*\([0-9]*\.[0-9]*\.[0-9]*\(\.[0-9.]*\)*\)/\1/p" )
      #     echo "Setting build_version to '$build_version'."
      #     echo "build_version=$build_version" >> "$GITHUB_ENV"
        
      - name: Show env
        id: show-env
        shell: bash
        run: |
          env | sort

      - name: Show variables
        id: show-vars
        shell: bash
        run: |

          echo "distribution='$distribution'."
          echo "build_type='$build_type'."
          echo "build_version='$build_version'."
          echo "build_version_override='$build_version_override'."
          echo "build_tag='$build_tag'."

      - name: Building distribution
        id: build
        uses: ./.github/actions/build-directory
        with:
          build_directory: .
          build_tag: ${{ env.build_tag }}
          build_version: ${{ env.build_version }}
          build_version_override: ${{ env.build_version_override }}
          build_type: ${{ env.build_type }}

      - name: Set output
        id: set-output
        shell: bash
        run: |
          distribution='${{ steps.build.outputs.distribution }}'
          build_ref='${{ steps.build.outputs.build_ref }}'
          echo "distribution=${{ steps.build.outputs.distribution }}" >> "$GITHUB_ENV"
          echo "build_ref=${{ steps.build.outputs.build_ref }}" >> "$GITHUB_ENV"
          echo "distribution=$distribution"   >> "$GITHUB_OUTPUT"
          echo "build_type=$build_type"       >> "$GITHUB_OUTPUT"
          echo "build_version=$build_version" >> "$GITHUB_OUTPUT"
          echo "build_version_override=$build_version_override" >> "$GITHUB_OUTPUT"
          echo "build_tag=$build_tag"         >> "$GITHUB_OUTPUT"
          echo "build_ref=$build_ref"         >> "$GITHUB_OUTPUT"

          echo "Set distribution='$distribution'."
          echo "Set build_type='$build_type'."
          echo "Set build_version='$build_version'."
          echo "Set build_version_override='$build_version_override'."
          echo "Set build_tag='$build_tag'."
          echo "Set build_ref='$build_ref'."

