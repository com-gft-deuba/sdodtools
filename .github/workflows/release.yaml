name: Release
permissions:
  "contents": "write"

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Build tag
        required: true
        default: "v0.0.1"
        type: string

jobs:

  prepare_release:
    runs-on: "ubuntu-latest"
    # outputs:
    #   build_type: ${{ steps.set-output.outputs.build_type }}
    #   build_version: ${{ steps.set-output.outputs.build_version }}
    #   build_ref: ${{ steps.set-output.outputs.build_ref }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

      - name: Check for valid tag format
        id: check-valid-tag
        shell: bash
        run: |

          if [[ ! '${{inputs.tag}}' =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] ; then 
            echo "Invalid tag format: '${{inputs.tag}}'."
            exit 1
          fi

          echo "Found valid version format '${{inputs.tag}}'."
          exit 0

      - name: Checkout TAG
        id: checkout-tag
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
          fetch-tags: true
          ref: refs/tags/${{ inputs.tag }}

      - name: Check for existing release
        id: check-existing-release
        shell: bash
        run: |
          set +e
          gh release view "${{ inputs.tag }}"
          status=$?
          set -e
          echo
          echo "Status: $status"

      # - name: GitHub Release
      #   id: github-release
      #   env:
      #     ANNOUNCEMENT_TITLE: "${{ fromJson(needs.host.outputs.val).announcement_title }}"
      #     ANNOUNCEMENT_BODY: "${{ fromJson(needs.host.outputs.val).announcement_github_body }}"
      #     RELEASE_COMMIT: "${{ github.sha }}"
      #   run: |
      #     # Write and read notes from a file to avoid quoting breaking things
      #     echo "$ANNOUNCEMENT_BODY" > $RUNNER_TEMP/notes.txt

      #     gh release create \
      #       "v${{ needs.build.outputs.version }}" \
      #       --target "$RELEASE_COMMIT" \
      #       --prerelease \
      #       --title "Release of version '${{ needs.build.outputs.version }}'" \
      #       dist/*
            
      #       # --notes-file "$RUNNER_TEMP/notes.txt" artifacts/*
