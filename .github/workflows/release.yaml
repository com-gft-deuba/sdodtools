name: Release
permissions:
  "contents": "write"

on:

  workflow_dispatch:

    inputs:

      release_tag:
        description: Build tag
        required: true
        default: "v0.0.2"
        type: string

jobs:

  release:

    runs-on: "ubuntu-latest"

    outputs:

      distribution: ${{ steps.set-output.outputs.distribution }}
      build_type: ${{ steps.set-output.outputs.build_type }}
      build_version: ${{ steps.set-output.outputs.build_version }}
      build_version_override: ${{ steps.set-output.outputs.build_version_override }}
      build_tag: ${{ steps.set-output.outputs.build_tag }}
      build_ref: ${{ steps.set-output.outputs.build_ref }}

    env:

      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:

      - name: Setup Environment
        id: setup-environment
        shell: bash
        run: |
          echo "release_tag=${{ inputs.release_tag }}" >> "$GITHUB_ENV"

      - name: Check for valid tag format
        id: check-valid-tag
        shell: bash
        run: |
          if [[ ! "$release_tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] ; then 

            echo "Invalid tag format: '$release_tag'. Setting release type 'error'."
            echo "release_type=error" >> "$GITHUB_ENV"
            exit 1

          fi

          echo "Found valid tag format '$release_tag'."
          echo "release_tag=$release_tag" >> "$GITHUB_ENV"

      - name: Checkout TAG
        id: checkout-tag
        continue-on-error: true
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
          fetch-tags: true
          ref: refs/tags/${{ env.release_tag }}

      - name: Checkout HEAD
        id: checkout-head
        if: steps.checkout-tag.outcome == 'failure'
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
          fetch-tags: true

      - name: Check for release type
        id: check-release-type
        shell: bash
        run: |

          set +e
          gh release view --json "id,isDraft,apiUrl,tagName,uploadUrl,url,assets" "$release_tag" > release_info.json
          status=$?
          set -e

          if [[ $status -ne 0 ]] ; then

            if [[ '${{ steps.checkout-tag.outcome }}' == 'failure' ]] ; then

              echo "Neither tag nor release '$release_tag' not found. Aborting!"
              echo "release_type=error" >> "$GITHUB_ENV"
              echo "release_id=" >> "$GITHUB_ENV"
              echo "release_is_draft=false" >> "$GITHUB_ENV"
              exit 1

            fi

            echo "Tag found but no release '$release_tag' not found, will create a new one."
            echo "release_type=new" >> "$GITHUB_ENV"
            echo "release_id=" >> "$GITHUB_ENV"
            echo "release_is_draft=true" >> "$GITHUB_ENV"
            exit 0

          fi

          release_id=$( echo "$output" | jq -r .id - )
          release_is_draft=$( echo "$output" | jq -r .isDraft - )

          if [[ "$release_is_draft" != "true" ]]; then

            echo "Found '$release_tag' with id '$release_id' but it is NOT a draft. Aborting!"
            echo "release_type=error" >> "$GITHUB_ENV"
            echo "release_id=$release_id" >> "$GITHUB_ENV"
            echo "release_is_draft=$release_is_draft" >> "$GITHUB_ENV"
            exit 1

          fi

          echo "Release draft '$release_tag' with id '$release_id' found. Setting release_type to 'augment'."
          echo "release_type=augment" >> "$GITHUB_ENV"
          echo "release_id=$release_id" >> "$GITHUB_ENV"
          echo "release_is_draft=$release_is_draft" >> "$GITHUB_ENV"

      - name: Show env
        id: show-env
        shell: bash
        run: |
          env | sort

      - name: Starting build of release
        uses: ./.github/workflows/build
        with:
          build_tag: ${{ env.release_tag }}

      # - name: GitHub Release
      #   id: github-release
      #   env:
      #     ANNOUNCEMENT_TITLE: "${{ fromJson(needs.host.outputs.val).announcement_title }}"
      #     ANNOUNCEMENT_BODY: "${{ fromJson(needs.host.outputs.val).announcement_github_body }}"
      #     RELEASE_COMMIT: "${{ github.sha }}"
      #   run: |
      #     # Write and read notes from a file to avoid quoting breaking things
      #     echo "$ANNOUNCEMENT_BODY" > $RUNNER_TEMP/notes.txt

      #     gh release create \
      #       "v${{ needs.build.outputs.version }}" \
      #       --target "$RELEASE_COMMIT" \
      #       --prerelease \
      #       --title "Release of version '${{ needs.build.outputs.version }}'" \
      #       dist/*
            
      #       # --notes-file "$RUNNER_TEMP/notes.txt" artifacts/*







      - name: Building distribution
        id: build
        uses: ./.github/actions/build-directory
        with:
          build_directory: .
          build_tag: ${{ env.build_tag }}
          build_version: ${{ env.build_version }}
          build_version_override: ${{ env.build_version_override }}
          build_type: ${{ env.build_type }}

      - name: Set output
        id: set-output
        shell: bash
        run: |
          distribution='${{ steps.build.outputs.distribution }}'
          build_ref='${{ steps.build.outputs.build_ref }}'
          echo "distribution=${{ steps.build.outputs.distribution }}" >> "$GITHUB_ENV"
          echo "build_ref=${{ steps.build.outputs.build_ref }}" >> "$GITHUB_ENV"
          echo "distribution=$distribution"   >> "$GITHUB_OUTPUT"
          echo "build_type=$build_type"       >> "$GITHUB_OUTPUT"
          echo "build_version=$build_version" >> "$GITHUB_OUTPUT"
          echo "build_version_override=$build_version_override" >> "$GITHUB_OUTPUT"
          echo "build_tag=$build_tag"         >> "$GITHUB_OUTPUT"
          echo "build_ref=$build_ref"         >> "$GITHUB_OUTPUT"

          echo "Set distribution='$distribution'."
          echo "Set build_type='$build_type'."
          echo "Set build_version='$build_version'."
          echo "Set build_version_override='$build_version_override'."
          echo "Set build_tag='$build_tag'."
          echo "Set build_ref='$build_ref'."

