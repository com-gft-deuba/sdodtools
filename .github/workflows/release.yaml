name: Release
permissions:
  "contents": "write"

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Build tag
        required: true
        default: ""
        type: string

jobs:

  prepare_release:
    runs-on: "ubuntu-latest"
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

      - name: Setup Environment
        id: setup-environment
        shell: bash
        run: |
          echo "build_tag=${{inputs.tag}}" >> "$GITHUB_ENV"

      - name: Check for valid tag format
        id: check-valid-tag
        shell: bash
        run: |

          if [[ ! "$build_tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] ; then 

            echo "Invalid tag format: '$build_tag'. Setting build type 'error'."
            echo "build_type=error" >> "$GITHUB_ENV"
            exit 1

          fi

          echo "Found valid tag format '$build_tag'."

      # - name: Checkout TAG
      #   id: checkout-tag
      #   continue-on-error: true
      #   uses: actions/checkout@v4
      #   with:
      #     submodules: recursive
      #     fetch-depth: 1
      #     fetch-tags: true
      #     ref: refs/tags/${{ env.build_tag }}

      # - name: Checkout HEAD
      #   id: checkout-head
      #   if: steps.checkout-tag.outcome == 'failure'
      #   uses: actions/checkout@v4
      #   with:
      #     submodules: recursive
      #     fetch-depth: 1
      #     fetch-tags: true
      #     ref: refs/tags/${{ env.build_tag }}

      # - name: Set tag
      #   id: create-tag
      #   if: steps.checkout-tag.outcome == 'failure'

      - name: Check for existing release
        id: check-existing-release
        shell: bash
        run: |
          set +e
          gh release view "$build_tag"
          status=$?
          set -e

          if [[ $status -ne 0 ]]; then

            echo "Release not found, will create a new one."
            echo "release_type=new" >> "$GITHUB_ENV"
            echo "release_id=" >> "$GITHUB_ENV"
            exit 0

          fi
          
          gh release view --json "id,isDraft,apiUrl,tagName,uploadUrl,url,assets" "$build_tag"


          release_id=$( gh release view --json "id" "$build_tag" )
          echo "release_type=new" >> "$GITHUB_ENV"
          echo "release_id=$id" >> "$GITHUB_ENV"

      - name: Show env
        id: show-env
        shell: bash
        run: |
          env | sort

      # - name: GitHub Release
      #   id: github-release
      #   env:
      #     ANNOUNCEMENT_TITLE: "${{ fromJson(needs.host.outputs.val).announcement_title }}"
      #     ANNOUNCEMENT_BODY: "${{ fromJson(needs.host.outputs.val).announcement_github_body }}"
      #     RELEASE_COMMIT: "${{ github.sha }}"
      #   run: |
      #     # Write and read notes from a file to avoid quoting breaking things
      #     echo "$ANNOUNCEMENT_BODY" > $RUNNER_TEMP/notes.txt

      #     gh release create \
      #       "v${{ needs.build.outputs.version }}" \
      #       --target "$RELEASE_COMMIT" \
      #       --prerelease \
      #       --title "Release of version '${{ needs.build.outputs.version }}'" \
      #       dist/*
            
      #       # --notes-file "$RUNNER_TEMP/notes.txt" artifacts/*
