name: Release
permissions:
  "contents": "write"

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Release Tag
        required: true
        default: dry-run
        type: string

jobs:
  check_version:
    runs-on: "ubuntu-latest"
    outputs:
      release_ype: ${{ steps.check-valid-version.outputs.release_type }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check for valid version format
        id: check-valid-version
        shell: bash
        run: |
          if [[ '${{input.tag}}' == 'dry-run' ]]; then
            echo "Found 'dry-run' tag."
            echo "release_type='dry-run'" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [[ ! '${{input.tag}}' =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format: '${{input.tag}}'"
            echo "release_type='error'" >> "$GITHUB_OUTPUT"
            exit 1
          fi

          echo "Found valid version format: '${{input.tag}}'
          echo "release_type='full'" >> "$GITHUB_OUTPUT"


  build:
    runs-on: "ubuntu-latest"
    if: ${{ always() && ( needs.check_version.outputs.release_type == 'full' || needs.check_version.outputs.release_type == 'dry-run' ) }}
    needs:
      - check_version
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      distribution: ${{ steps.determine-distribution.outputs.distribution }}
      version: ${{ steps.determine-version.outputs.version }}
    steps:
      - name: Checkout HEAD
        if: ${{ always() && needs.check_version.outputs.release_type == 'full' }}
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 1
      - name: Checkout TAG
        uses: actions/checkout@v4
        if: ${{ always() && needs.check_version.outputs.release_type == 'dry-run' }}
        with:
          submodules: recursive
          fetch-depth: 1
          ref: refs/tags/${{ inputs.tag }}
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.6'
      - name: Install build dependencies
        id: install-depenencies
        shell: bash
        run: python3 -m pip install --upgrade pip setuptools wheel build virtualenv
      - name: Build
        id: build
        shell: bash
        run: python -m build --sdist .
      - name: Determine distribution
        id: determine-distribution
        shell: bash
        run: |
          read distribution < <( cd dist && ls -1 *.tar.gz | head -1 )
          echo "distribution='$distribution'" >> "$GITHUB_OUTPUT"
      - name: Determine version
        id: determine-version
        shell: bash
        run: |
          read version < <( echo "$distribution" | sed -n 's/.*?-\(.*\).tar.gz$/\1/p' )
          echo "version='$version'" >> "$GITHUB_OUTPUT"
          echo "$version" dist/VERSION
      - name: "Upload artifacts"
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: distribution
          if-no-files-found: error
          retention-days: 2
          path: |
            dist/${{ steps.determine-distribution.outputs.distribution }}
            dist/VERSION


  release:
    needs:
      - build
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: "ubuntu-latest"
    steps:
      - name: Download artifacts
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: distribution
          path: dist
          pattern: '*.tar.gz'
      - name: GitHub Release
        id: github-release
        env:
          ANNOUNCEMENT_TITLE: "${{ fromJson(needs.host.outputs.val).announcement_title }}"
          ANNOUNCEMENT_BODY: "${{ fromJson(needs.host.outputs.val).announcement_github_body }}"
          RELEASE_COMMIT: "${{ github.sha }}"
        run: |
          # Write and read notes from a file to avoid quoting breaking things
          echo "$ANNOUNCEMENT_BODY" > $RUNNER_TEMP/notes.txt

          gh release create \
            "v${{ needs.build.outputs.version }}" \
            --target "$RELEASE_COMMIT" \
            --prerelease \
            --title "Release of version '${{ needs.build.outputs.version }}'" \
            dist/*
            
            # --notes-file "$RUNNER_TEMP/notes.txt" artifacts/*
