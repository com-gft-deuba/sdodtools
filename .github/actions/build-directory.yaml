name: 'Build Directory'

description: 'Standard build process for the current directory'

inputs:

  build_tag:
    description: Build version override
    required: true
    default: ""
    type: string

  build_directory:
    description: Directory to build
    required: false
    default: .
    type: string

  build_version:
    description: Build version
    required: false
    default: dry-run
    type: string

  build_version_override:
    description: Build version override
    required: false
    default: ""
    type: string

  build_type:
    description: Build version override
    required: false
    default: "dry-run"
    type: string

outputs:

  distribution: ${{ steps.set-output.outputs.distribution }}
  build_version: ${{ steps.set-output.outputs.build_version }}

runs:
  using: "composite"
  steps:

    # Valid build tags need to match the format 'vX.Y.Z'

    - name: Setup Environment
      id: setup-environment
      shell: bash
      run: |
        build_stamp=$( date +%Y%m%d%H%M%S )
        build_ref="$( git rev-parse HEAD )"
        echo "build_tag=${{inputs.build_tag}}" >> "$GITHUB_ENV"
        echo "build_directory=${{inputs.build_directory}}" >> "$GITHUB_ENV"
        echo "build_version=${{inputs.build_version}}" >> "$GITHUB_ENV"
        echo "build_version_override=${{inputs.build_version_override}}" >> "$GITHUB_ENV"
        echo "build_stamp=$build_stamp" >> "$GITHUB_ENV"
        echo "build_ref=${{inputs.build_ref}}" >> "$GITHUB_ENV"

    # Check and cleanup the build version

    - name: Check for valid parameters
      id: check-valid-tag
      shell: bash
      run: |

        if [[ "$build_type" != 'dry-run' -a "$build_type" != 'tag' ]] ; then

          echo "Invalid build_type: '$build_type'. Aborting."
          exit 0

        fi

        if [[ ! "$build_tag" !~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] ; then 

          echo "Invalid build_tag format: '$build_tag'. Aborting."
          exit 1

        fi

        if [[ -z "$build_version" ]] ; then build_version=$( echo "$build_tag" | sed -n "s/^v*\([0-9]*\.[0-9]*\.[0-9]*\(\.[0-9.]*\)*\)/\1/p" ) ; fi

        if [[ ! "$build_version" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+(\.[0-9.])?$ ]] ; then 

          echo "Invalid build_version format: '$build_version'. Aborting."
          exit 1

        fi

        echo "Found valid build version '$build_version'.""
        echo "build_version=$build_version" >> "$GITHUB_ENV"

    # Setup build environment

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install build dependencies
      id: install-depenencies
      shell: bash
      run: python3 -m pip install --upgrade pip setuptools wheel build virtualenv jinja2

      # Replace placeholders in the templates with the environment variables

    - name: Process templates
      id: process-templates
      shell: python
      run: |
        import sys
        import os
        import jinja2

        env = jinja2.Environment(loader = jinja2.FileSystemLoader('templates'))
        variables = { 
          'build_version': None,
          'build_version_override': None,
          'build_type': None,
          'build_ref': None,
          'build_tag': None,
        }

        for key in variables.keys():

          if key not in os.environ:

            print(f"Error: Environment variable '{key}' not found!")
            sys.exit(10)

          variables[key] = os.environ[key]

        for filename in env.list_templates():

          template = env.get_template(filename)
          output = template.render(variables)

          with open(filename, 'w') as f:

            f.write(output)

    # Do the actual build

    - name: Build
      id: build
      shell: bash
      run: |
        python -m build --sdist .

    # Check the name of the artifact we build

    - name: Determine distribution
      id: determine-distribution
      shell: bash
      run: |
        find dist -type f -ls
        distribution=$( cd dist && ls -1 *"-$build_version.tar.gz" | head -1 )
        echo "distribution=$distribution" >> "$GITHUB_ENV"

    # Write some meta information to the artifact and set the output of the job

    - name: Create distribution meta-information
      id: create-distribution-meta-information
      shell: bash
      run: |
        mkdir dist/META
        echo -n "$distribution"  > dist/META/DISTRIBUTION
        echo -n "$build_type"    > dist/META/TYPE
        echo -n "$build_version" > dist/META/VERSION
        echo -n "$build_tag"     > dist/META/TAG
        echo -n "$build_ref"     > dist/META/REF

        if [[ ! -z "$build_version_override" ]]; then

          echo -n "$build_version_override" > dist/META/VERSION_OVERRIDE

        fi

    # Set the output for the build job

    - name: Set output
      id: set-output
      shell: bash
      run: |
        echo -n "distribution=$distribution"   >> "$GITHUB_OUTPUT"
        echo -n "build_type=$build_type" >> "$GITHUB_OUTPUT"
        echo -n "build_version=$build_version" >> "$GITHUB_OUTPUT"
        echo -n "build_version_override=$build_version_override" >> "$GITHUB_OUTPUT"
        echo -n "build_tag=$build_tag"         >> "$GITHUB_OUTPUT"
        echo -n "build_ref=$build_ref"         >> "$GITHUB_OUTPUT"

        echo "Set distribution='$distribution'."
        echo "Set build_version='$build_version'."
        echo "Set build_version_override='$build_version_override'."
        echo "Set build_tag='$build_tag'."
        echo "Set build_ref='$build_ref'."

    - name: "Upload artifacts"
      id: upload-artifact
      uses: actions/upload-artifact@v4
      with:
        name: distribution
        if-no-files-found: error
        retention-days: 2
        path: |
          dist/${{ steps.determine-distribution.outputs.distribution }}
          dist/META
